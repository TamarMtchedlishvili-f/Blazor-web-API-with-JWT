@page "/MarketWithCompanyAndPrice2"
@using IraoAssignment.Shared
@inject HttpClient client
@inject IJSRuntime js

<h3>Markets with Companies and prices</h3>
@* <small>Add as many Companies as you wish.</small> *@
<div class="form-group">
    <a class="btn btn-success" href="MarketWithCompanyAndPrice/create"><i class="oi oi-plus"></i> Create New</a>
</div>
<br>

@if (MarketWithCompanyAndPrices == null)
{
    <text>Loading...</text>
}
else if (MarketWithCompanyAndPrices.Length == 0)
{
    <text>No Records Found.</text>
}
else
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Company</th>
            <th>Market</th> 
            <th>Company Price</th> 
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (MarketWithCompanyAndPrice marketWithCompanyAndPrice in MarketWithCompanyAndPrices)
        {
            <tr>
                <td>@marketWithCompanyAndPrice.Company</td>
                <td>@marketWithCompanyAndPrice.Market</td>
                <td>@marketWithCompanyAndPrice.CompanyPrice</td>
                <td>
                    <a class="btn btn-success" href="MarketWithCompanyAndPrice/edit/@marketWithCompanyAndPrice.Id">Edit</a>
                    <button class="btn btn-danger" @onclick="@(() => Delete(marketWithCompanyAndPrice.Id))">Delete</button>
                </td>
            </tr>
        }

        </tbody>
    </table>
}

@code {
    MarketWithCompanyAndPrice[] MarketWithCompanyAndPrices { get; set; }

    protected override async Task OnInitializedAsync()
    {
        MarketWithCompanyAndPrices = await client.GetFromJsonAsync<MarketWithCompanyAndPrice[]>("api/MarketWithCompanyAndPrice");
    }

    async Task Delete(int MarketWithCompanyAndPriceId)
    {
        var marketWithCompanyAndPrice = MarketWithCompanyAndPrices.First(x => x.Id == MarketWithCompanyAndPriceId);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {marketWithCompanyAndPrice.Company}'s ({marketWithCompanyAndPrice.Id}) Record?"))
        {
            await client.DeleteAsync($"api/MarketWithCompanyAndPrices/{MarketWithCompanyAndPriceId}");
            await OnInitializedAsync();
        }
    }

}