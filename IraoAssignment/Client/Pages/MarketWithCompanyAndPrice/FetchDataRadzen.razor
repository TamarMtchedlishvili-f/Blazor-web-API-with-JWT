@page "/"
@using IraoAssignment.Shared
@using System.Globalization
@using System.Reactive.Linq

@inject HttpClient client
@inject IJSRuntime js
@inject NavigationManager uriHelper


<h1>Markets with Companies and Prices</h1>


<RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click="@InsertRow"/>
<RadzenDataGrid @ref=MarketWithCompanyAndPricesGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="7" AllowPaging="true" AllowSorting="true"
                EditMode="DataGridEditMode.Single" Data="@MarketWithCompanyAndPrices" TItem="MarketWithCompanyAndPrice" ColumnWidth="100px" LogicalFilterOperator="LogicalFilterOperator.Or" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
    <Columns>

        <RadzenDataGridColumn TItem="MarketWithCompanyAndPrice" Property="Id" Title="Id"/>

        <RadzenDataGridColumn Width="200px" TItem="MarketWithCompanyAndPrice" Property="Market.MarketName" Title="Market Name">
            <EditTemplate Context="marketWithCompanyAndPrice">
                <RadzenDropDown TValue="Market" @bind-Value="marketWithCompanyAndPrice.Market" Placeholder="Select Market" AllowFiltering="true" Data="@markets" TextProperty="Market" ValueProperty="Id" Style="margin-bottom: 20px"/>
            </EditTemplate>
        </RadzenDataGridColumn>


        <RadzenDataGridColumn Width="200px" TItem="MarketWithCompanyAndPrice" Property="Company.CompanyName" Title="Company Name">
            <EditTemplate Context="marketWithCompanyAndPrice">
                <RadzenDropDown TValue="Company" @bind-Value="marketWithCompanyAndPrice.Company" Placeholder="Select Company" AllowFiltering="true" Data="@(companies)" TextProperty="Company" ValueProperty="Id" Style="margin-bottom: 20px"/>
            </EditTemplate>
        </RadzenDataGridColumn>

        
        <RadzenDataGridColumn TItem="MarketWithCompanyAndPrice" Property="CompanyPrice" Title="Company Price">
            <Template Context="marketWithCompanyAndPrice">
                @String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", marketWithCompanyAndPrice.CompanyPrice)
            </Template>
            <EditTemplate Context="marketWithCompanyAndPrice">
                <RadzenNumeric @bind-Value="marketWithCompanyAndPrice.CompanyPrice" Style="width:100%"/>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="MarketWithCompanyAndPrice" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
            <Template Context="order">
                <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="order">
                <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(order))">
                </RadzenButton>
                <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(order))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="MarketWithCompanyAndPrice" Context="marketWithCompanyAndPrice" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
            <Template Context="marketWithCompanyAndPrice">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(marketWithCompanyAndPrice))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="marketWithCompanyAndPrice">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(marketWithCompanyAndPrice))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<div class="container">
    <div class="row">
        <div class="col-sm-12 my-5">
            <RadzenChart @ref=@chart>
                <RadzenColumnSeries Data="@revenues.Where(r => r.Company == Companies.Company5)" CategoryProperty="@nameof(DataItem.Market)" Title="@Companies.Company5" ValueProperty="@nameof(DataItem.Price)"/>
                <RadzenColumnSeries Data="@revenues.Where(r => r.Company == Companies.Company4)" CategoryProperty="@nameof(DataItem.Market)" Title="@Companies.Company4" ValueProperty="@nameof(DataItem.Price)"/>
                <RadzenColumnSeries Data="@revenues.Where(r => r.Company == Companies.Company3)" CategoryProperty="@nameof(DataItem.Market)" Title="@Companies.Company3" ValueProperty="@nameof(DataItem.Price)"/>
                <RadzenColumnSeries Data="@revenues.Where(r => r.Company == Companies.Company2)" CategoryProperty="@nameof(DataItem.Market)" Title="@Companies.Company2" ValueProperty="@nameof(DataItem.Price)"/>
                <RadzenColumnSeries Data="@revenues.Where(r => r.Company == Companies.Company1)" CategoryProperty="@nameof(DataItem.Market)" Title="@Companies.Company1" ValueProperty="@nameof(DataItem.Price)"/>
                <RadzenColumnOptions Radius="5"/>
                <RadzenValueAxis Formatter="@FormatAsUSD">
                    <RadzenGridLines Visible="true"/>
                    <RadzenAxisTitle Text="Company Price in USD"/>
                </RadzenValueAxis>
            </RadzenChart>
        </div>
    </div>
</div>


@code {

    public static class Companies
    {
        public const string Company1 = nameof(Company1);
        public const string Company2 = nameof(Company2);
        public const string Company3 = nameof(Company3);
        public const string Company4 = nameof(Company4);
        public const string Company5 = nameof(Company5);
    }

    class DataItem
    {
        public DataItem(string company, string market, decimal price)
        {
            Company = company;
            Market = market;
            Price = price;
        }

        public string Market { get; }
        public string Company { get; }
        public decimal Price { get; }
    }

    string FormatAsUSD(object value) => value is double d ? d.ToString("C0", CultureInfo.CreateSpecificCulture("en-US")) : value.ToString();

    readonly List<DataItem> revenues = new();

    RadzenChart chart;

    RadzenDataGrid<MarketWithCompanyAndPrice> MarketWithCompanyAndPricesGrid;

    MarketWithCompanyAndPrice[] MarketWithCompanyAndPrices { get; set; }
    IEnumerable<Market> markets;
    IEnumerable<Company> companies;

    protected override async Task OnInitializedAsync()
    {
        async Task repopulateRevenues()
        {
            int random() => new Random().Next(50, 100);
            revenues.Clear();

            var data = await FetchData();

            revenues.AddRange(data.Select(d => new DataItem(d.Company.CompanyName, d.Market.MarketName, d.CompanyPrice)));
            
            
            
            await chart.Reload();
            return;

            revenues.AddRange(
                Enumerable.Range(1, 5)
                    .SelectMany(companyId
                        => Enumerable.Range(1, 3)
                            .Select(marketId
                                => new DataItem($"Company{companyId}", $"Market{marketId}", random()))));
        }

        Observable.Interval(TimeSpan.FromSeconds(5))
            .Select(l => Observable.FromAsync(repopulateRevenues))
    //Ensure that the results are serialized
            .Concat()
    //do what you will here with the results of the async method calls
            .Subscribe();

        MarketWithCompanyAndPrices = (await FetchData()).ToArray();
    }

        const string apiMarketWithCompanyAndPrice = "api/marketWithCompanyAndPrice";

    async Task<MarketWithCompanyAndPrice[]> FetchData() => await client.GetFromJsonAsync<MarketWithCompanyAndPrice[]>(apiMarketWithCompanyAndPrice);

    async Task SaveRow(MarketWithCompanyAndPrice marketWithCompanyAndPrice) => await MarketWithCompanyAndPricesGrid.UpdateRow(marketWithCompanyAndPrice);

    async Task DeleteRow(MarketWithCompanyAndPrice marketWithCompanyAndPrice)
    {
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete a record?"))
        {
            await client.DeleteAsync($"{apiMarketWithCompanyAndPrice}/{marketWithCompanyAndPrice.Id}");
            await OnInitializedAsync();
        }
    }

    void CancelEdit(MarketWithCompanyAndPrice marketWithCompanyAndPrice) => MarketWithCompanyAndPricesGrid.CancelEditRow(marketWithCompanyAndPrice);

    async Task InsertRow() => await MarketWithCompanyAndPricesGrid.InsertRow(new MarketWithCompanyAndPrice());

    async Task EditRow(MarketWithCompanyAndPrice marketWithCompanyAndPrice) => await MarketWithCompanyAndPricesGrid.EditRow(marketWithCompanyAndPrice);

    async Task OnCreateRow(MarketWithCompanyAndPrice marketWithCompanyAndPrice) => await client.PostAsJsonAsync(apiMarketWithCompanyAndPrice, marketWithCompanyAndPrice);

    async Task OnUpdateRow(MarketWithCompanyAndPrice marketWithCompanyAndPrice)
    {
        await client.PutAsJsonAsync(apiMarketWithCompanyAndPrice, marketWithCompanyAndPrice);
    // uriHelper.NavigateTo("marketWithCompanyAndPrice");
    }

}