@page "/MarketWithCompanyAndPrice"
@using IraoAssignment.Shared
@using System.Globalization

@inject HttpClient client
@inject IJSRuntime js
@inject NavigationManager uriHelper


<h1>Markets with Companies and Prices</h1>


<RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click="@InsertRow"/>
<RadzenDataGrid @ref=MarketWithCompanyAndPricesGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="5" AllowPaging="true" AllowSorting="true"
                EditMode="DataGridEditMode.Single" Data="@MarketWithCompanyAndPrices" TItem="MarketWithCompanyAndPrice" ColumnWidth="100px" LogicalFilterOperator="LogicalFilterOperator.Or" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
    <Columns>

        @* ეს არის იმ ველების სია, რაც ჩანს ლისთვიუზე *@
        <RadzenDataGridColumn TItem="MarketWithCompanyAndPrice" Property="Id" Title="Id"/>

        <RadzenDataGridColumn Width="200px" TItem="MarketWithCompanyAndPrice" Property="Market.MarketName" Title="Market Name">
            <EditTemplate Context="marketWithCompanyAndPrice">
                <RadzenDropDown TValue="Market" @bind-Value="marketWithCompanyAndPrice.Market" Placeholder="Select Market" AllowFiltering="true" Data="@markets" TextProperty="Market" ValueProperty="Id" Style="width:100%"/>
            </EditTemplate>
        </RadzenDataGridColumn>


        <RadzenDataGridColumn Width="200px" TItem="MarketWithCompanyAndPrice" Property="Company.CompanyName" Title="Company Name">
            <EditTemplate Context="marketWithCompanyAndPrice">
                <RadzenDropDown @bind-Value="marketWithCompanyAndPrice.Company" Data="@companies" TextProperty="Company" ValueProperty="Company" Style="width:100%"/>
            </EditTemplate>
        </RadzenDataGridColumn>


        @* <RadzenDropDown TValue="string" @bind-Value="Market" Placeholder="Select Market" AllowFiltering="true" Data="@(markets)" TextProperty="MarketName" ValueProperty="Id" Style="margin-bottom: 20px" /> *@

        <RadzenDataGridColumn TItem="MarketWithCompanyAndPrice" Property="CompanyPrice" Title="Company Price">
            <Template Context="marketWithCompanyAndPrice">
                @String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", marketWithCompanyAndPrice.CompanyPrice)
            </Template>
            <EditTemplate Context="marketWithCompanyAndPrice">
                <RadzenNumeric @bind-Value="marketWithCompanyAndPrice.CompanyPrice" Style="width:100%"/>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="MarketWithCompanyAndPrice" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
            <Template Context="order">
                <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="order">
                <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(order))">
                </RadzenButton>
                <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(order))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="MarketWithCompanyAndPrice" Context="marketWithCompanyAndPrice" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
            <Template Context="marketWithCompanyAndPrice">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(marketWithCompanyAndPrice))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="marketWithCompanyAndPrice">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(marketWithCompanyAndPrice))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@*--------------------------------------------------------------------------------------------------------------------------------------------------------*@

<div class="container">
    <div class="row">
        <div class="col-sm-12 my-5">
            <RadzenChart>
                <RadzenColumnSeries Data="@revenue2021" CategoryProperty="Market" Title="Company5" LineType="LineType.Dashed" ValueProperty="Price"/>
                <RadzenColumnSeries Data="@revenue2021" CategoryProperty="Market" Title="Company4" LineType="LineType.Dashed" ValueProperty="Price"/>
                <RadzenColumnSeries Data="@revenue2021" CategoryProperty="Market" Title="Company3" LineType="LineType.Dashed" ValueProperty="Price"/>
                <RadzenColumnSeries Data="@revenue2020" CategoryProperty="Market" Title="Company2" LineType="LineType.Dashed" ValueProperty="Price"/>
                <RadzenColumnSeries Data="@Company1" CategoryProperty="Market" Title="Company1" ValueProperty="Price"/>
                <RadzenColumnOptions Radius="5"/>
                <RadzenValueAxis Formatter="@FormatAsUSD">
                    <RadzenGridLines Visible="true"/>
                    <RadzenAxisTitle Text="Company Price in USD"/>
                </RadzenValueAxis>
            </RadzenChart>
        </div>
    </div>
</div>


@code {

    class DataItem
    {
   
        public string Market { get; set; }
        public double Price { get; set; }
    }

    string FormatAsUSD(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-US"));
    }

    DataItem[] Company1 = new DataItem[]
    {
        new DataItem
        {
            Market = "Market1",
            Price = 234000
        },
        new DataItem
        {
            Market = "Market2",
            Price = 284000
        },
        new DataItem
        {
            Market = "Market3",
            Price = 274000
        },
    };

    DataItem[] revenue2020 = new DataItem[]
    {
        new DataItem
        {
            Market = "Market1",
            Price = 254000
        },
        new DataItem
        {
            Market = "Market2",
            Price = 324000
        },
        new DataItem
        {
            Market = "Market3",
            Price = 354000
        },
    };

    DataItem[] revenue2021 = new DataItem[]
    {
        new DataItem
        {
            Market = "Market1",
            Price = 254000
        },
        new DataItem
        {
            Market = "Market2",
            Price = 324000
        },
        new DataItem
        {
            Market = "Market3",
            Price = 354000
        },
    };

    //------------------------------------------------------------------------------------

    RadzenDataGrid<MarketWithCompanyAndPrice> MarketWithCompanyAndPricesGrid;

    MarketWithCompanyAndPrice[] MarketWithCompanyAndPrices { get; set; }
    IEnumerable<Market> markets;
    IEnumerable<Company> companies;
    IEnumerable<DataItemT> _dataItemTs;
    DataItemT DataItemT;
    static IEnumerable<MarketWithCompanyAndPrice> _marketWithCompanyAndPrices;

    protected override async Task OnInitializedAsync()
    {
        MarketWithCompanyAndPrices = await client.GetFromJsonAsync<MarketWithCompanyAndPrice[]>("api/marketWithCompanyAndPrice");
    }

    async Task SaveRow(MarketWithCompanyAndPrice marketWithCompanyAndPrice)
    {
        await MarketWithCompanyAndPricesGrid.UpdateRow(marketWithCompanyAndPrice);
    }

    async Task DeleteRow(MarketWithCompanyAndPrice marketWithCompanyAndPrice)
    {
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {marketWithCompanyAndPrice.Company}'s ({marketWithCompanyAndPrice.Id}) Record?"))
        {
            await client.DeleteAsync($"api/marketWithCompanyAndPrice/{marketWithCompanyAndPrice.Id}");
            await OnInitializedAsync();
        }
    }

    void CancelEdit(MarketWithCompanyAndPrice marketWithCompanyAndPrice)
    {
        MarketWithCompanyAndPricesGrid.CancelEditRow(marketWithCompanyAndPrice);
    }

    async Task InsertRow()
    {
    // uriHelper.NavigateTo($"marketWithCompanyAndPrice/create");
        MarketWithCompanyAndPricesGrid.InsertRow(new MarketWithCompanyAndPrice());
    }

    void EditRow(MarketWithCompanyAndPrice marketWithCompanyAndPrice)
    {
    // uriHelper.NavigateTo($"marketWithCompanyAndPrice/edit/{marketWithCompanyAndPrice.Id}");
        MarketWithCompanyAndPricesGrid.EditRow(marketWithCompanyAndPrice);
    }

    async Task OnCreateRow(MarketWithCompanyAndPrice marketWithCompanyAndPrice)
    {
        await client.PostAsJsonAsync("api/marketWithCompanyAndPrice", marketWithCompanyAndPrice);
    }

    async Task OnUpdateRow(MarketWithCompanyAndPrice marketWithCompanyAndPrice)
    {
        await client.PutAsJsonAsync("api/marketWithCompanyAndPrice", marketWithCompanyAndPrice);
        await js.InvokeVoidAsync("alert", $"Updated Successfully!");
        uriHelper.NavigateTo("marketWithCompanyAndPrice");
    }

    async Task Delete(int marketWithCompanyAndPriceId)
    {
        var marketWithCompanyAndPrice = MarketWithCompanyAndPrices.First(x => x.Id == marketWithCompanyAndPriceId);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {marketWithCompanyAndPrice.Company}'s ({marketWithCompanyAndPrice.Id}) Record?"))
        {
            await client.DeleteAsync($"api/marketWithCompanyAndPrice/{marketWithCompanyAndPriceId}");
            await OnInitializedAsync();
        }
    }

}